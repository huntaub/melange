package message;

// ---------------
// Server Messages
// ---------------

// Transaction is used to provide proof that the name is actually in
// the block chain. Each transaction gives information about verifying
// its presence in a block.
message Transaction {
    required string id                  = 1;
    required int32  branch              = 2;
    repeated bytes  verification_hashes = 3;
    required bytes  raw                 = 4;
    required string block_id            = 5;
    optional int32  value               = 6;
}

// Proof will carry proof that the name is of the person specified.
message Proof {
    required string type  = 1;
    required bytes  value = 2;
}

// ResolvedName is used to provide an answer to name queries. It may
// or may not carry proof in the form of a list of transactions.
message ResolvedName {
    required bool   found = 1;
    required string name  = 2;
    optional bytes  value = 3;

    repeated Proof proof = 4;
}

// ListName is used to provide a list of names to the client.
message ListName {
    repeated string name = 1;
}

// TransferFunds is a response to RequestFunds that includes the
// transaction id, output number, and PkScript.
message TransferFunds {
    required int64  amount = 1;
    required string id     = 2;
    required uint32 index  = 3;
    required bytes  script = 4;
}

// RegistrationResponse is returned in response to a Registration or
// Renew message. It does not imply that the registration was not
// fulfilled successfully (since registration can take a number of
// hours). The client should immediately check to see if the
// registration still exists.
message RegistrationResponse {
    required bool   success     = 1;
    optional string information = 2;
}

// ---------------
// Client Messages
// ---------------


message RequestFunds {
    required string address = 1;
}

message LookupName {
    required string lookup = 1;
    optional bool   prefix = 2;
}

// RegisterName will 
message RegisterName {
    // Information about the name so that Zooko can serve a temporary
    // record to clients before Namecoin puts data in the block chain.
    required string name = 1;
    required bytes  value = 2;

    // Signed raw Namecoin transactions, ready to be broadcast to the
    // world.
    required bytes name_new         = 3;
    required bytes name_firstupdate = 4;
}

// RenewName is used to request that a name_update transaction be send
// to the network. It also carries a name and updated value that Zooko
// can serve until the name update transaction is in the blockchain.
message RenewName {
    required string name  = 1;
    required bytes  value = 2;

    // Signed raw Namecoin transactions.
    required bytes name_update = 3;
}
